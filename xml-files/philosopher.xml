<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
clock cl; </declaration>
	<template>
		<name x="5" y="5">philosopher</name>
		<parameter>bool &amp;leftfork, bool &amp;rightfork</parameter>
		<declaration>// Place local declarations here.</declaration>
		<location id="id0" x="-357" y="-76">
			<name x="-374" y="-59">think</name>
		</location>
		<location id="id1" x="-187" y="-161">
			<name x="-238" y="-195">waitRightfork</name>
		</location>
		<location id="id2" x="-187" y="-8">
			<name x="-229" y="8">waitLeftfork</name>
		</location>
		<location id="id3" x="-17" y="-85">
			<name x="-25" y="-68">eat</name>
			<label kind="invariant" x="-25" y="-51">cl &lt;= 60</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-238" y="-246">cl &gt;= 20</label>
			<label kind="assignment" x="-289" y="-229">leftfork = 0, rightfork = 0</label>
			<nail x="-17" y="-229"/>
			<nail x="-357" y="-229"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-161" y="-59">leftfork == false</label>
			<label kind="assignment" x="-161" y="-42">leftfork = true</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-161" y="-136">rightfork == false</label>
			<label kind="assignment" x="-161" y="-119">rightfork = true</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-314" y="-59">rightfork == false</label>
			<label kind="assignment" x="-314" y="-42">rightfork = true</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-314" y="-136">leftfork == false</label>
			<label kind="assignment" x="-314" y="-119">leftfork = true</label>
		</transition>
	</template>
	<system>// two dinning philosopher
//bool leftfork = 0; 
//bool rightfork = 0; 


//Philosopher1 = philosopher(leftfork, rightfork);
//Philosopher2 = philosopher(rightfork, leftfork);

//system Philosopher1, Philosopher2;
    
// three dinning philosopher
bool leftforkP1 = 0; 
bool leftforkP2 = 0; 
bool leftforkP3 = 0; 


Philosopher1 = philosopher(leftforkP1, leftforkP3);
Philosopher2 = philosopher(leftforkP2, leftforkP1);
Philosopher3 = philosopher(leftforkP3, leftforkP2); 

system Philosopher1, Philosopher2, Philosopher3;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not((Philosopher1.waitRightfork || Philosopher1.eat) &amp;&amp; (Philosopher2.waitLeftfork || Philosopher2.eat))</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
